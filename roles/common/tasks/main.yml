---
- name: Display installing k8s message
  debug:
    msg: "installing k8s"

- name: Display requirements message
  debug:
    msg:
      - "#### Requirements ####"
      - "arch: arm, os: ubuntu20.04"
      - "######################"

- name: Stop and disable ufw
  systemd:
    name: ufw
    state: stopped
    enabled: no

- name: Create containerd config file
  copy:
    content: |
      overlay
      br_netfilter
    dest: /etc/modules-load.d/containerd.conf

- name: Load overlay and br_netfilter modules
  modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - overlay
    - br_netfilter

- name: Create Kubernetes CRI sysctl config
  copy:
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1
    dest: /etc/sysctl.d/99-kubernetes-cri.conf

- name: Apply sysctl settings
  command: sysctl --system

- name: Update and install required packages
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  loop:
    - apt-transport-https
    - ca-certificates
    - curl
    - gnupg
    - lsb-release

- name: Add Docker GPG key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    keyring: /usr/share/keyrings/docker-archive-keyring.gpg

- name: Add Docker apt repository
  apt_repository:
    repo: "deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present

- name: Install containerd.io
  apt:
    name: containerd.io
    state: present
    update_cache: yes

- name: Create containerd config directory
  file:
    path: /etc/containerd
    state: directory

- name: Generate and save containerd config
  shell: containerd config default > /etc/containerd/config.toml

- name: Restart containerd service
  systemd:
    name: containerd
    state: restarted

- name: Create Docker daemon config
  copy:
    content: |
      {
        "exec-opts": ["native.cgroupdriver=systemd"],
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "100m"
        },
        "storage-driver": "overlay2"
      }
    dest: /etc/docker/daemon.json

- name: Disable swap
  command: swapoff -a

- name: Comment swap in /etc/fstab
  replace:
    path: /etc/fstab
    regexp: '^(.+ swap .+)$'
    replace: '#\1'

- name: Install additional required packages
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - apt-transport-https
    - ca-certificates
    - curl

- name: Add Kubernetes GPG key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    keyring: /usr/share/keyrings/kubernetes-archive-keyring.gpg

- name: Add Kubernetes apt repository
  apt_repository:
    repo: "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main"
    state: present

- name: Update and install Kubernetes components
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  vars:
    version: "1.26.3-00"
  loop:
    - kubelet={{ version }}
    - kubeadm={{ version }}
    - kubectl={{ version }}

- name: Create k8s config file
  copy:
    content: |
      br_netfilter
    dest: /etc/modules-load.d/k8s.conf

- name: Create k8s sysctl config
  copy:
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
    dest: /etc/sysctl.d/k8s.conf

- name: Remove iptables reject rules
  shell: |
    iptables -D INPUT -j REJECT --reject-with icmp-host-prohibited
    iptables -D FORWARD -j REJECT --reject-with icmp-host-prohibited

- name: Apply sysctl settings again
  command: sysctl --system
